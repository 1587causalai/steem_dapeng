<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Steemsql on STEEM@dapeng</title>
    <link>https://steemit.netlify.com/tags/steemsql/index.xml</link>
    <description>Recent content in Steemsql on STEEM@dapeng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://steemit.netlify.com/tags/steemsql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Build a mirror/backup site for your own steem posts in 30 minutes - 30 分钟搭建自己的 steem 镜像备份网站</title>
      <link>https://steemit.netlify.com/post/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem/</link>
      <pubDate>Mon, 06 Nov 2017 09:44:42 +0000</pubDate>
      
      <guid>https://steemit.netlify.com/post/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem/</guid>
      <description>

&lt;p&gt;原文链接: &lt;a href=&#34;https://steemit.com/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;steemit&lt;/a&gt;, &lt;a href=&#34;https://cnsteem.com/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;cnsteem&lt;/a&gt;, &lt;a href=&#34;https://busy.org/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;busy&lt;/a&gt;, &lt;a href=&#34;https://chainbb.com/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;chainbb&lt;/a&gt;, &lt;a href=&#34;https://steemdb.com/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;steemdb&lt;/a&gt;, &lt;a href=&#34;https://steemd.com/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;steemd&lt;/a&gt;, &lt;a href=&#34;https://busy.org/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;busy&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pzhaonet/steem_dapeng/master/content/post/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem.md&#34;&gt;markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yesterday, I built two mirror sites for my steem posts (&lt;a href=&#34;https://dapeng.netlify.com/&#34;&gt;mirror 1&lt;/a&gt;，&lt;a href=&#34;https://steemit.netlify.com/&#34;&gt;mirror 2&lt;/a&gt;) as backups, which are synced automatically everyday, thanks to steemsql and steemdata. The mirror sites are very useful:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;for emergency, in case that steemit.com and busy.org are down,&lt;/li&gt;
&lt;li&gt;as backups, in case that steemsql and steemdata are gone,&lt;/li&gt;
&lt;li&gt;for revision, where the posts are allowed to be modified even after 7 days,&lt;/li&gt;
&lt;li&gt;for more replies, thanks to disqus,&lt;/li&gt;
&lt;li&gt;for a stable looking, no matter how the interface of steemit changes in the future, and&lt;/li&gt;
&lt;li&gt;for fast browsing, especially when your posts are more than 100.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both of these sites are free of costs, and updated automatically.&lt;/p&gt;

&lt;p&gt;How long does it take to build a site like them?&lt;/p&gt;

&lt;p&gt;Following my steps, it takes less than half an hour, if you are an expert on R language. For newbies, it depends on how long it takes you to learn R. Anyway, you will save much time that I wasted in many failed attempts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://steemitimages.com/DQmVGn1eWfueYNVC9Xw4Hy41F9xDPR16jdGojPCDcJsfVxv/mirror1.jpg&#34; alt=&#34;mirror1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here are the steps.&lt;/p&gt;

&lt;h3 id=&#34;build-a-hugo-site-with-r-blogdown&#34;&gt;Build a Hugo site with R blogdown&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Install R and RStudio.&lt;/li&gt;
&lt;li&gt;Created a blogdown project from RStudio&amp;rsquo;s menu.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;download-your-posts-from-steemsql-or-steemdata&#34;&gt;Download your posts from steemsql or steemdata&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;R RODBC can visit steemsql database, and R mongolite can visit steemdata database. Either is OK.&lt;/li&gt;
&lt;li&gt;Download the target posts, and organize them into markdown files with R.&lt;/li&gt;
&lt;li&gt;Copy the markdown files into the contents folder in your site folder.&lt;/li&gt;
&lt;li&gt;Run the build_site() function in R blogdown.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;publish-your-site-folder-to-github&#34;&gt;Publish your site folder to Github&lt;/h3&gt;

&lt;p&gt;Create a new repo on Github, and publish your site folder.&lt;/p&gt;

&lt;h3 id=&#34;deploy-with-netlify&#34;&gt;Deploy with Netlify&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Log in Netlify.com with your github account.&lt;/li&gt;
&lt;li&gt;Created a new site, choose your site folder from github, and use hugo_0.19 as the command.&lt;/li&gt;
&lt;li&gt;Wait seconds or minutes, and you can visit your mirror sites!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;sync-automatically-everyday&#34;&gt;Sync automatically everyday&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Write a .bat script on Windows, or .sh script on Linux, to call your R script, which downloads the new posts, builds the site, and syncs with Github repo.&lt;/li&gt;
&lt;li&gt;Use the task scheduler on Windows or crontab on Linux to run the .bat or .sh automatically everyday or every hour or whatever.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s all. Wish you success!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://steemitimages.com/DQmbNZ7kw2ynuig2qZjhmDPHKynQobL2iiSatQsGJgQJZiB/mirror2.jpg&#34; alt=&#34;mirror2.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;昨天，我为自己在 steem 上发布的帖子制作了两个镜像网站（&lt;a href=&#34;https://dapeng.netlify.com/&#34;&gt;镜像1&lt;/a&gt;，&lt;a href=&#34;https://steemit.netlify.com/&#34;&gt;镜像2&lt;/a&gt;）。每天定时跟 steem 同步更新，作为备份用。&lt;/p&gt;

&lt;p&gt;镜像网站的好处是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;应急。万一 steemit.com、busy.org 等前端网站挂了，至少我自己的文章还能来镜像访问。&lt;/li&gt;
&lt;li&gt;备份。有朝一日万一 steemsql 等数据库黄了，万一区块链挂了，我辛辛苦苦码出的文章还健在。&lt;/li&gt;
&lt;li&gt;修改。steem 上的文章过了7天后就没法修改，而镜像网站的永远可以修改，可以精益求精。&lt;/li&gt;
&lt;li&gt;评论。镜像网站上配置的是 disqus 评论系统，多引入一个评论方式。&lt;/li&gt;
&lt;li&gt;美观。不管 steemit 等网站界面好看难看，我有一片独立的自留地。&lt;/li&gt;
&lt;li&gt;快捷。找自己的文章时，再也不用往下拉，载入，等待，再拉，再载入，再等待……&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这两个镜像全部是免费搭建的，搭建完毕后就每天自动更新，不用再操心了。&lt;/p&gt;

&lt;p&gt;那么，搭建一个这样的网站需要多久？&lt;/p&gt;

&lt;p&gt;熟悉 R 语言的话，从零开始到成功访问，整个过程用不了半小时。如果是 R 语言的新手，那么主要取决于多久能学会 R。无论如何，我花了很多时间来尝试，才建立了下面的步骤，这个时间你可以省了。&lt;/p&gt;

&lt;p&gt;搭建这两个网站，用的主要工具是 R 语言的 blogdown 包。大体流程是：用 R 语言在本地搭建一个 Hugo 框架的静态网站，然后同步到 GitHub，再由 Netlify 布署。&lt;/p&gt;

&lt;p&gt;下面简要说说步骤。&lt;/p&gt;

&lt;h3 id=&#34;用-r-语言搭建-hugo-网站&#34;&gt;用 R 语言搭建 Hugo 网站&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;先安装 R 语言和 RStudio。&lt;/li&gt;
&lt;li&gt;从 RStudio 的菜单栏创建一个 blogdown 项目，选择中意的网站主题，用不了1分钟，一个静态的 HUGO 网站框架就搭建好了，所有文件都保存在本地的一个文件夹里。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;用-r-语言从-steemsql-或-steemdata-下载帖子&#34;&gt;用 R 语言从 steemsql 或 steemdata 下载帖子&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;如果访问 steemsql 数据库，请安装 R 语言的 RODBC 包；如果访问 steemdata 数据库，请安装 mongolite 包。两个数据库都可以提供 steem 上文章的所有信息。&lt;/li&gt;
&lt;li&gt;从数据库将需要的帖子下载到本地，并整理成 markdown 格式的文本文件。&lt;/li&gt;
&lt;li&gt;将文本文件拷贝到你的网站文件夹的 contents 里。&lt;/li&gt;
&lt;li&gt;运行 R blogdown 的建站函数。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;将网站文件夹发布到-github&#34;&gt;将网站文件夹发布到 Github&lt;/h3&gt;

&lt;p&gt;在 Github 上创建一个新的项目，将你的网站文件夹发布上去。&lt;/p&gt;

&lt;h3 id=&#34;用-netlify-布署&#34;&gt;用 Netlify 布署&lt;/h3&gt;

&lt;p&gt;用你的 Github 账号登陆 Netlify，创建一个新站点，选择你的网站文件夹，并用 hugo_0.19 作为布署命令。设置完毕后，短则几秒，长则几分钟，就可以访问你的镜像网站啦！&lt;/p&gt;

&lt;p&gt;Netlify 提供免费的二级域名。当然，你也可以买个域名来绑定。&lt;/p&gt;

&lt;h3 id=&#34;每天自动同步&#34;&gt;每天自动同步&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;编写一个批处理程序，来调用 R 代码，从而完成下载帖子、建站、与 GitHub 同步的工作。&lt;/li&gt;
&lt;li&gt;用 Windows 的自动任务，每天自动运行上述批处理，就实现了每天自动同步。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最近我在看美剧《西部世界》。我的机器人 @pzhao 可不能亏待，所以我为 @pzhao 也做了一个&lt;a href=&#34;https://pz.netlify.com/&#34;&gt;镜像&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://steemitimages.com/DQmeYUwQ7Juorgd79o6D5E34BnUYxwfmLxYH4cApgPRhRf6/end2.jpg&#34; alt=&#34;dapeng&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>steemsql 也开始不靠谱了</title>
      <link>https://steemit.netlify.com/post/steemsql/</link>
      <pubDate>Mon, 30 Oct 2017 09:49:27 +0000</pubDate>
      
      <guid>https://steemit.netlify.com/post/steemsql/</guid>
      <description>&lt;p&gt;原文链接: &lt;a href=&#34;https://steemit.com/cn/@dapeng/steemsql&#34;&gt;steemit&lt;/a&gt;, &lt;a href=&#34;https://cnsteem.com/cn/@dapeng/steemsql&#34;&gt;cnsteem&lt;/a&gt;, &lt;a href=&#34;https://chainbb.com/cn/@dapeng/steemsql&#34;&gt;chainbb&lt;/a&gt;, &lt;a href=&#34;https://busy.org/cn/@dapeng/steemsql&#34;&gt;busy&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pzhaonet/steem_mirror/master/content/post/steemsql.md&#34;&gt;markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;今天的“希望工程”日报一出来，我就发现新人新帖里很多垃圾文，没有经过过滤。&lt;/p&gt;

&lt;p&gt;我有个小号 @pzhao ，当作机器人来用，打算自动发布一些模板化的帖子和评论。目前，”历史上的今天“已经交给机器人发布了。我一直想等着“希望工程”日报做成熟之后，也交过去，免得对我的一些 followers 造成骚扰。可是，除了 steem python API 经常发不出去文章之外，还时不时出点别的幺蛾子。steemsql 就是一个。&lt;/p&gt;

&lt;p&gt;“希望工程”日报的垃圾帖过滤工作，是用 R 语言程序完成的。R 程序自动从 steemsql 数据库里，读取 @incrediblesnow 最新发布的 cn-abuse 报告，从中获取新增的灰名单和黑名单，然后对新人新帖进行过滤。&lt;/p&gt;

&lt;p&gt;然而，&lt;a href=&#34;https://cnsteem.com/cn/@incrediblesnow/29-10-2017-cn-abuse-report-for-cn-abuse-on-29-10-2017&#34;&gt;昨天的 cn-abuse 报告&lt;/a&gt;，在 steemsql 里看不见。例如搜索：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
SELECT body 

FROM Comments 

WHERE title like N&#39;%Cn-abuse 的报告%&#39; 

  AND author = &#39;incrediblesnow&#39; 

  AND json_metadata like &#39;%\&amp;quot;cn\&amp;quot;%&#39; 

  AND created BETWEEN &#39;2017/10/29&#39; and &#39;2017/10/30&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果是零条。&lt;/p&gt;

&lt;p&gt;放宽一下搜索条件：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
SELECT title 

FROM Comments 

WHERE author = &#39;incrediblesnow&#39; 

  AND created BETWEEN &#39;2017/10/20&#39; and &#39;2017/10/30&#39; 

  AND title &amp;lt;&amp;gt; &#39;&#39;

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;仍然搜不到。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://steemitimages.com/DQmT2EerJQhoLsMUTQEKzCfgQiQ8vhnRH4etzrFU2gZ8Va3/steemsql.jpg&#34; alt=&#34;steemsql.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;这就导致昨天的灰名单和黑名单没有被读到，所以“希望工程”的日报就没有得到过滤。好在，就算是没过滤，新人新帖也比前些天大为减少了。&lt;/p&gt;

&lt;p&gt;两个月前，我发现 &lt;a href=&#34;https://steemit.com/cn/@dapeng/unreliable-analysis-on-steem-data-steem&#34;&gt;steemdata 的数据框不靠谱&lt;/a&gt;，于是换到了 steemsql。现在连 steemsql 也不靠谱了，该怎么办？&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://steemitimages.com/DQmeYUwQ7Juorgd79o6D5E34BnUYxwfmLxYH4cApgPRhRf6/end2.jpg&#34; alt=&#34;dapeng&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>