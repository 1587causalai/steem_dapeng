<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on STEEM@dapeng</title>
    <link>https://steemit.netlify.com/tags/programming/index.xml</link>
    <description>Recent content in Programming on STEEM@dapeng</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="https://steemit.netlify.com/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Display all the posts of a steemian and the statistics - 展示一个账户的所有帖子和统计数据</title>
      <link>https://steemit.netlify.com/post/display-all-the-posts-of-a-steemian-and-the-statistics-or/</link>
      <pubDate>Thu, 09 Nov 2017 22:39:33 +0000</pubDate>
      
      <guid>https://steemit.netlify.com/post/display-all-the-posts-of-a-steemian-and-the-statistics-or/</guid>
      <description>&lt;p&gt;原文链接: &lt;a href=&#34;https://steemit.com/steemdev/@dapeng/display-all-the-posts-of-a-steemian-and-the-statistics-or&#34;&gt;steemit&lt;/a&gt;, &lt;a href=&#34;https://cnsteem.com/steemdev/@dapeng/display-all-the-posts-of-a-steemian-and-the-statistics-or&#34;&gt;cnsteem&lt;/a&gt;, &lt;a href=&#34;https://busy.org/steemdev/@dapeng/display-all-the-posts-of-a-steemian-and-the-statistics-or&#34;&gt;busy&lt;/a&gt;, &lt;a href=&#34;https://chainbb.com/steemdev/@dapeng/display-all-the-posts-of-a-steemian-and-the-statistics-or&#34;&gt;chainbb&lt;/a&gt;, &lt;a href=&#34;https://steemdb.com/steemdev/@dapeng/display-all-the-posts-of-a-steemian-and-the-statistics-or&#34;&gt;steemdb&lt;/a&gt;, &lt;a href=&#34;https://steemd.com/steemdev/@dapeng/display-all-the-posts-of-a-steemian-and-the-statistics-or&#34;&gt;steemd&lt;/a&gt;, &lt;a href=&#34;https://busy.org/steemdev/@dapeng/display-all-the-posts-of-a-steemian-and-the-statistics-or&#34;&gt;busy&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pzhaonet/steem_dapeng/master/content/post/display-all-the-posts-of-a-steemian-and-the-statistics-or.md&#34;&gt;markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is hard to see all the posts of a steemian on steemit. You have to scroll down your browser, wait, and scroll, and wait &amp;hellip;&amp;hellip; Nothing is more boring if the author has hundreds of posts and you want to see the oldest one, which might be the self-introduction post.&lt;/p&gt;

&lt;p&gt;I was suffering this problem for a long time. Today I could not stand it any longer. Thus I developed a web app: &lt;a href=&#34;http://steemr.org&#34;&gt;http://steemr.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Input an ID and press Enter, you can see a table of all the posts. Features:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;The table displays 20 posts per page by default. You could change the number on the topleft of the table to display 50 or 100 posts per page, or all the posts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Input something as keywords in the topright bar or the bottom bars, and you can search in the post titles.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;One single click can jump to the webpage of a post on steemit, cnsteem, chainbb, busy, steemdb, or steemd.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;The time, payout and vote number are given. Click the column name and you can sort the posts.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Statistic diagrams show the cumulative payout, votes and post number. A 24-hour diagram shows the active hour of the author.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The following figure is an example, showing the growth of the cumulative payout of @deanliu&amp;rsquo;s posts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://steemitimages.com/DQmaB6PqmCqJPQNaXYPjbcsaGV7QQjcMB9VdwkTVCrg4sV6/payout.png&#34; alt=&#34;payout.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Have fun!&lt;/p&gt;

&lt;p&gt;Steem 有个让人无比郁闷的毛病：想一目了然地看一个人的所有帖子，你得往下拉，等着载入，再拉，再等&amp;hellip;&amp;hellip;尤其是那些发布了几百上千篇帖子的大神，想看他们的旧帖，在 steemit 上难比登天。我只能去 chainbb，那里支持分页，点第一页就行了。但是，你还得点页码，仍然不是很方便。&lt;/p&gt;

&lt;p&gt;为啥就没个文章全部列表呢？连杀人鲸 @deanliu  都&lt;a href=&#34;https://cnsteem.com/cn/@deanliu/juan&#34;&gt;抱怨&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;我其實等待這樣的我所有文章列表很久了，Steemit老是把resteem跟自己文章放一起，大半年了，說過的人甚至走一半了，也沒見有人理會。這樣列表的好處是，可以很快找到自己的很久以前舊文章&amp;hellip;&amp;hellip;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;如今，能做到展示全部文章列表的，大概只有我量身定做的 &lt;a href=&#34;https://cnsteem.com/cn/@dapeng/or-10-sbd-to-build-a-mirror-site-for-your-own-steem-posts&#34;&gt;steem 镜像网站&lt;/a&gt;了（&lt;a href=&#34;https://deancrypto.netlify.com&#34;&gt;@deanliu 的镜像&lt;/a&gt;， &lt;a href=&#34;https://dapeng.netlify.com/&#34;&gt;@dapeng 的镜像&lt;/a&gt;， &lt;a href=&#34;https://pz.netlify.com/&#34;&gt;@pzhao 的镜像&lt;/a&gt;）。只是我仍不满意：没做镜像的怎么看？想看某人收益最高的帖子怎么办？每次都查数据库，太烦了。&lt;/p&gt;

&lt;p&gt;于是我二话没说，操起 R 语言，光光光光，做好了，欢迎大家来调戏，地址是 &lt;a href=&#34;http://steemr.org。是的，就是我开发的&#34;&gt;http://steemr.org。是的，就是我开发的&lt;/a&gt; &lt;a href=&#34;https://cnsteem.com/cn/@dapeng/steemit-cn&#34;&gt;steem 水浒英雄榜&lt;/a&gt;那个地址。英雄榜往后放，给帖子一览表让位。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://steemitimages.com/DQmbDaR2E7U2XhAtsCkVySBRxZQ6TNzEkucWpwCdxYrtBxh/steemr20171109.gif&#34; alt=&#34;steemr20171109.gif&#34; /&gt;&lt;/p&gt;

&lt;p&gt;只要输入个 steem 账号，按回车，就显示这个账号的所有 blog 帖子（不包含 resteemed）。功能如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;默认每页显示 20 篇文章。你可以点击表格左上角的数字，选择每页 50 篇，或 100 篇，或全部显示。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;表格左上角和下放都有搜索栏，可以搜索标题里的关键字。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;每篇文章都给出了在 steemit , cnsteem, chainbb, busy, steemdb, steemd 的链接，点一下直达。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;每篇文章都给出了发布时间、收益（SBD）和点赞数量。点击标题栏，就可以实现排序。按时间顺序、逆序，按收益最大或最小，随便你排。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;附带给出了统计图表，展示作者累计收益、累计点赞、累计文章数量和 24 小时活跃时间的统计图。&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;??图是 @deanliu 的作息时间图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://steemitimages.com/DQmfAd47vrT4ZjMhZCKtWKj5ZcQhdagdrhPNAXKDeDn1k8G/24.png&#34; alt=&#34;24.png&#34; /&gt;
这个 app 我一直想做，拖拖拖拖拖到了今天才终于做出来。近期的心愿已了，我打算闭关一段时间，正如 @deanliu &lt;a href=&#34;https://deancrypto.netlify.com/post/owo-farewell/&#34;&gt;所说&lt;/a&gt;：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;接下来这一周我将不再发文章、不再参与讨论，也不再点赞，要把时间留给这个月来被我疏忽的家庭、进度落后的工作、脸书上的朋友，以及最重要的身体的健康。毕竟，日子还长呢，养精蓄锐之后，才能为自己的SteemLife注入新的能量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;朋友们再见！下周的这个时候，我会回来给“华语好声音”颁奖。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build a mirror/backup site for your own steem posts in 30 minutes - 30 分钟搭建自己的 steem 镜像备份网站</title>
      <link>https://steemit.netlify.com/post/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem/</link>
      <pubDate>Mon, 06 Nov 2017 09:44:42 +0000</pubDate>
      
      <guid>https://steemit.netlify.com/post/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem/</guid>
      <description>

&lt;p&gt;原文链接: &lt;a href=&#34;https://steemit.com/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;steemit&lt;/a&gt;, &lt;a href=&#34;https://cnsteem.com/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;cnsteem&lt;/a&gt;, &lt;a href=&#34;https://busy.org/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;busy&lt;/a&gt;, &lt;a href=&#34;https://chainbb.com/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;chainbb&lt;/a&gt;, &lt;a href=&#34;https://steemdb.com/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;steemdb&lt;/a&gt;, &lt;a href=&#34;https://steemd.com/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;steemd&lt;/a&gt;, &lt;a href=&#34;https://busy.org/steemdev/@dapeng/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem&#34;&gt;busy&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pzhaonet/steem_dapeng/master/content/post/build-a-mirror-backup-site-for-your-own-steem-posts-in-30-minutes-or-30-steem.md&#34;&gt;markdown&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yesterday, I built two mirror sites for my steem posts (&lt;a href=&#34;https://dapeng.netlify.com/&#34;&gt;mirror 1&lt;/a&gt;，&lt;a href=&#34;https://steemit.netlify.com/&#34;&gt;mirror 2&lt;/a&gt;) as backups, which are synced automatically everyday, thanks to steemsql and steemdata. The mirror sites are very useful:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;for emergency, in case that steemit.com and busy.org are down,&lt;/li&gt;
&lt;li&gt;as backups, in case that steemsql and steemdata are gone,&lt;/li&gt;
&lt;li&gt;for revision, where the posts are allowed to be modified even after 7 days,&lt;/li&gt;
&lt;li&gt;for more replies, thanks to disqus,&lt;/li&gt;
&lt;li&gt;for a stable looking, no matter how the interface of steemit changes in the future, and&lt;/li&gt;
&lt;li&gt;for fast browsing, especially when your posts are more than 100.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Both of these sites are free of costs, and updated automatically.&lt;/p&gt;

&lt;p&gt;How long does it take to build a site like them?&lt;/p&gt;

&lt;p&gt;Following my steps, it takes less than half an hour, if you are an expert on R language. For newbies, it depends on how long it takes you to learn R. Anyway, you will save much time that I wasted in many failed attempts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://steemitimages.com/DQmVGn1eWfueYNVC9Xw4Hy41F9xDPR16jdGojPCDcJsfVxv/mirror1.jpg&#34; alt=&#34;mirror1.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Here are the steps.&lt;/p&gt;

&lt;h3 id=&#34;build-a-hugo-site-with-r-blogdown&#34;&gt;Build a Hugo site with R blogdown&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Install R and RStudio.&lt;/li&gt;
&lt;li&gt;Created a blogdown project from RStudio&amp;rsquo;s menu.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;download-your-posts-from-steemsql-or-steemdata&#34;&gt;Download your posts from steemsql or steemdata&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;R RODBC can visit steemsql database, and R mongolite can visit steemdata database. Either is OK.&lt;/li&gt;
&lt;li&gt;Download the target posts, and organize them into markdown files with R.&lt;/li&gt;
&lt;li&gt;Copy the markdown files into the contents folder in your site folder.&lt;/li&gt;
&lt;li&gt;Run the build_site() function in R blogdown.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;publish-your-site-folder-to-github&#34;&gt;Publish your site folder to Github&lt;/h3&gt;

&lt;p&gt;Create a new repo on Github, and publish your site folder.&lt;/p&gt;

&lt;h3 id=&#34;deploy-with-netlify&#34;&gt;Deploy with Netlify&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Log in Netlify.com with your github account.&lt;/li&gt;
&lt;li&gt;Created a new site, choose your site folder from github, and use hugo_0.19 as the command.&lt;/li&gt;
&lt;li&gt;Wait seconds or minutes, and you can visit your mirror sites!&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;sync-automatically-everyday&#34;&gt;Sync automatically everyday&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;Write a .bat script on Windows, or .sh script on Linux, to call your R script, which downloads the new posts, builds the site, and syncs with Github repo.&lt;/li&gt;
&lt;li&gt;Use the task scheduler on Windows or crontab on Linux to run the .bat or .sh automatically everyday or every hour or whatever.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That&amp;rsquo;s all. Wish you success!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://steemitimages.com/DQmbNZ7kw2ynuig2qZjhmDPHKynQobL2iiSatQsGJgQJZiB/mirror2.jpg&#34; alt=&#34;mirror2.jpg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;昨天，我为自己在 steem 上发布的帖子制作了两个镜像网站（&lt;a href=&#34;https://dapeng.netlify.com/&#34;&gt;镜像1&lt;/a&gt;，&lt;a href=&#34;https://steemit.netlify.com/&#34;&gt;镜像2&lt;/a&gt;）。每天定时跟 steem 同步更新，作为备份用。&lt;/p&gt;

&lt;p&gt;镜像网站的好处是：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;应急。万一 steemit.com、busy.org 等前端网站挂了，至少我自己的文章还能来镜像访问。&lt;/li&gt;
&lt;li&gt;备份。有朝一日万一 steemsql 等数据库黄了，万一区块链挂了，我辛辛苦苦码出的文章还健在。&lt;/li&gt;
&lt;li&gt;修改。steem 上的文章过了7天后就没法修改，而镜像网站的永远可以修改，可以精益求精。&lt;/li&gt;
&lt;li&gt;评论。镜像网站上配置的是 disqus 评论系统，多引入一个评论方式。&lt;/li&gt;
&lt;li&gt;美观。不管 steemit 等网站界面好看难看，我有一片独立的自留地。&lt;/li&gt;
&lt;li&gt;快捷。找自己的文章时，再也不用往下拉，载入，等待，再拉，再载入，再等待……&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;这两个镜像全部是免费搭建的，搭建完毕后就每天自动更新，不用再操心了。&lt;/p&gt;

&lt;p&gt;那么，搭建一个这样的网站需要多久？&lt;/p&gt;

&lt;p&gt;熟悉 R 语言的话，从零开始到成功访问，整个过程用不了半小时。如果是 R 语言的新手，那么主要取决于多久能学会 R。无论如何，我花了很多时间来尝试，才建立了下面的步骤，这个时间你可以省了。&lt;/p&gt;

&lt;p&gt;搭建这两个网站，用的主要工具是 R 语言的 blogdown 包。大体流程是：用 R 语言在本地搭建一个 Hugo 框架的静态网站，然后同步到 GitHub，再由 Netlify 布署。&lt;/p&gt;

&lt;p&gt;下面简要说说步骤。&lt;/p&gt;

&lt;h3 id=&#34;用-r-语言搭建-hugo-网站&#34;&gt;用 R 语言搭建 Hugo 网站&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;先安装 R 语言和 RStudio。&lt;/li&gt;
&lt;li&gt;从 RStudio 的菜单栏创建一个 blogdown 项目，选择中意的网站主题，用不了1分钟，一个静态的 HUGO 网站框架就搭建好了，所有文件都保存在本地的一个文件夹里。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;用-r-语言从-steemsql-或-steemdata-下载帖子&#34;&gt;用 R 语言从 steemsql 或 steemdata 下载帖子&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;如果访问 steemsql 数据库，请安装 R 语言的 RODBC 包；如果访问 steemdata 数据库，请安装 mongolite 包。两个数据库都可以提供 steem 上文章的所有信息。&lt;/li&gt;
&lt;li&gt;从数据库将需要的帖子下载到本地，并整理成 markdown 格式的文本文件。&lt;/li&gt;
&lt;li&gt;将文本文件拷贝到你的网站文件夹的 contents 里。&lt;/li&gt;
&lt;li&gt;运行 R blogdown 的建站函数。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;将网站文件夹发布到-github&#34;&gt;将网站文件夹发布到 Github&lt;/h3&gt;

&lt;p&gt;在 Github 上创建一个新的项目，将你的网站文件夹发布上去。&lt;/p&gt;

&lt;h3 id=&#34;用-netlify-布署&#34;&gt;用 Netlify 布署&lt;/h3&gt;

&lt;p&gt;用你的 Github 账号登陆 Netlify，创建一个新站点，选择你的网站文件夹，并用 hugo_0.19 作为布署命令。设置完毕后，短则几秒，长则几分钟，就可以访问你的镜像网站啦！&lt;/p&gt;

&lt;p&gt;Netlify 提供免费的二级域名。当然，你也可以买个域名来绑定。&lt;/p&gt;

&lt;h3 id=&#34;每天自动同步&#34;&gt;每天自动同步&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;编写一个批处理程序，来调用 R 代码，从而完成下载帖子、建站、与 GitHub 同步的工作。&lt;/li&gt;
&lt;li&gt;用 Windows 的自动任务，每天自动运行上述批处理，就实现了每天自动同步。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最近我在看美剧《西部世界》。我的机器人 @pzhao 可不能亏待，所以我为 @pzhao 也做了一个&lt;a href=&#34;https://pz.netlify.com/&#34;&gt;镜像&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://steemitimages.com/DQmeYUwQ7Juorgd79o6D5E34BnUYxwfmLxYH4cApgPRhRf6/end2.jpg&#34; alt=&#34;dapeng&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>如何在 steemit 竞赛活动里认真抽取幸运奖 -谷哥点名#10  (How to Randomly Choose a Participator for the Lucky Prize in a Steemit Contest)</title>
      <link>https://steemit.netlify.com/post/how-to-randomly-choose-an-participator-for-the-lucky-prize-in-a-steemit-contest/</link>
      <pubDate>Sat, 07 Oct 2017 13:18:06 +0000</pubDate>
      
      <guid>https://steemit.netlify.com/post/how-to-randomly-choose-an-participator-for-the-lucky-prize-in-a-steemit-contest/</guid>
      <description>&lt;p&gt;原文链接: &lt;a href=&#34;https://steemit.com/cn/@dapeng/how-to-randomly-choose-an-participator-for-the-lucky-prize-in-a-steemit-contest&#34;&gt;steemit&lt;/a&gt;, &lt;a href=&#34;https://cnsteem.com/cn/@dapeng/how-to-randomly-choose-an-participator-for-the-lucky-prize-in-a-steemit-contest&#34;&gt;cnsteem&lt;/a&gt;, &lt;a href=&#34;https://chainbb.com/cn/@dapeng/how-to-randomly-choose-an-participator-for-the-lucky-prize-in-a-steemit-contest&#34;&gt;chainbb&lt;/a&gt;, &lt;a href=&#34;https://busy.org/cn/@dapeng/how-to-randomly-choose-an-participator-for-the-lucky-prize-in-a-steemit-contest&#34;&gt;busy&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/pzhaonet/steem_mirror/master/content/post/how-to-randomly-choose-an-participator-for-the-lucky-prize-in-a-steemit-contest.md&#34;&gt;markdown&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;It is easy to randomly choose a participator for a lucky prize in reality: use a dice, or write each participator&amp;rsquo;s name on a slice of paper, mix them, and choose one, in public. It is not easy to do it in a Steemit contest. How can you show the dice or the chosen slice of paper to public and everyone believes you and thinks that it is fair? See the R scripts in this post and you will get the best-ever solution.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;昨天公布的希望工程&lt;a href=&#34;https://steemit.com/cn/@dapeng/welcome-prize-for-new-steemians&#34;&gt;新人&amp;rdquo;三个一&amp;rdquo;活动&lt;/a&gt;，新老用户都可以参加幸运奖的抽取，而抽选方法并未公开。不是为了保密，而是因为这部分比较偏技术，而且篇幅长，怕喧宾夺主。本文详细说说，如何在一场 steemit 的竞赛中，以认真的态度随机挑选幸运奖。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://cdn.pixabay.com/photo/2016/11/20/08/12/dice-1842135_960_720.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在现实中，随机抽取幸运奖的方法很简单：每个名字写到一个纸团里，混匀，&lt;strong&gt;当众&lt;/strong&gt;随便拿一个出来就行了。如果不超过 6 个，&lt;strong&gt;当众&lt;/strong&gt;掷一次骰子就行。这跟编程实现的效果是等同的。例如，R 语言里有现成的随机选择代码。我们暂且用 31 活动的赞助名单，来举个例子。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
names &amp;lt;- c(&#39;victory622&#39;, &#39;tvb&#39;, &#39;shenchensucc&#39;, &#39;wangwenjing&#39;, &#39;drunkevil&#39;, &#39;dapeng&#39;)

n &amp;lt;- length(names)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;n 表示参加人数。从 n 里随便选 1 个，只需运行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
names[sample(n, 1)]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完事儿。&lt;/p&gt;

&lt;p&gt;但是，这个方法的致命缺陷是：&lt;strong&gt;当众&lt;/strong&gt;。我说我运行代码的结果是 dapeng，谁信啊！没人亲眼看见我的运行结果啊！别说别人，我自己重新再运行一次，结果可能就变了呀！如果奖金额度小，可能大家不计较，万一是一笔巨款呢？谁知道是不是暗箱操作内定的？&lt;/p&gt;

&lt;p&gt;所以，这个做法用在 steemit 的竞赛上，不够认真。&lt;/p&gt;

&lt;p&gt;怎么做才算认真，才能服众？R 语言里早就考虑到这个问题了。为了实现可重复性，可以这样来：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
names &amp;lt;- c(&#39;victory622&#39;, &#39;tvb&#39;, &#39;shenchensucc&#39;, &#39;wangwenjing&#39;, &#39;drunkevil&#39;, &#39;dapeng&#39;)

n &amp;lt;- length(names)

set.seed(31); names[sample(n, 1)]

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;前两行跟此前的代码完全相同。第三行先设置个种子，然后再随机选。这里，我们暂且给种子编号为 31。这样的话，不管啥时候，不管在哪台电脑上运行上面三行代码，都是同样的结果。免得大家怀疑主办方作弊，把幸运奖给内定了。如果你电脑上装了 R 语言，不妨试试上面的代码，看看结果是不是 wangwenjing。&lt;/p&gt;

&lt;p&gt;由于参赛名单不到最后一刻谁都不知道，所以运行的结果没法事先内定。&lt;/p&gt;

&lt;p&gt;也许还会有人质疑：你糊弄谁呢？我又不懂 R 语言，怎么检验你的结果？&lt;/p&gt;

&lt;p&gt;这个也好办。即使不懂 R 语言，你也可以轻松检查上述代码的运行结果。随便访问个 R 语言在线网站，例如&lt;a href=&#34;http://rextester.com/l/r_online_compiler&#34;&gt;这里&lt;/a&gt;、&lt;a href=&#34;http://www.r-fiddle.org/#/fiddle?id=IMMSu4Na&#34;&gt;这里&lt;/a&gt;、或&lt;a href=&#34;https://www.jdoodle.com/execute-r-online&#34;&gt;这里&lt;/a&gt;，把上面那三行代码复制粘贴进去，点运行，就看到结果了。看看是不是 wangwenjing。&lt;/p&gt;

&lt;p&gt;这已经是认真到万无一失了，但我们还可以更进一步，把事情做绝：将来抽奖的时候，我们把上面示例代码的种子编号 31，改为最后一位参加者发布文章时间的秒数，以区块链记录该文章的 created 时间为准。&lt;/p&gt;

&lt;p&gt;好了，不到最后一刻，谁都不知道最终的实际参加人数，也不知道种子编号。哪位能提供更认真的方法吗？欢迎拿出来单挑。&lt;/p&gt;

&lt;p&gt;至于“三个一”活动幸运奖最终花落谁家，让我们拭目以待。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://steemitimages.com/DQmeYUwQ7Juorgd79o6D5E34BnUYxwfmLxYH4cApgPRhRf6/end2.jpg&#34; alt=&#34;dapeng&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>